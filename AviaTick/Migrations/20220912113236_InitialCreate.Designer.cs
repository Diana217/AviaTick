// <auto-generated />
using System;
using AviaTick;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AviaTick.Migrations
{
    [DbContext(typeof(AviaTickDbContext))]
    [Migration("20220912113236_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AviaTick.Aircraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SeatsNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Aircraft");
                });

            modelBuilder.Entity("AviaTick.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("AviaTick.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("AviaTick.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AircraftId")
                        .HasColumnType("int");

                    b.Property<int>("ArrivalId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("time(0)");

                    b.Property<int>("DepartureId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("DepartureTime")
                        .HasColumnType("time(0)");

                    b.HasKey("Id");

                    b.HasIndex("AircraftId");

                    b.HasIndex("ArrivalId");

                    b.HasIndex("DepartureId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("AviaTick.Passenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Passenger", (string)null);
                });

            modelBuilder.Entity("AviaTick.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BookDate")
                        .HasColumnType("date");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("PassengerId")
                        .HasColumnType("int");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("PassengerId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("AviaTick.Airport", b =>
                {
                    b.HasOne("AviaTick.City", "City")
                        .WithMany("Airports")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Airports_Cities");

                    b.Navigation("City");
                });

            modelBuilder.Entity("AviaTick.Flight", b =>
                {
                    b.HasOne("AviaTick.Aircraft", "Aircraft")
                        .WithMany("Flights")
                        .HasForeignKey("AircraftId")
                        .IsRequired()
                        .HasConstraintName("FK_Flights_Aircrafts");

                    b.HasOne("AviaTick.Airport", "Arrival")
                        .WithMany("FlightArrivals")
                        .HasForeignKey("ArrivalId")
                        .IsRequired()
                        .HasConstraintName("FK_Flights_Airports");

                    b.HasOne("AviaTick.Airport", "Departure")
                        .WithMany("FlightDepartures")
                        .HasForeignKey("DepartureId")
                        .IsRequired()
                        .HasConstraintName("FK_Flights_Airports1");

                    b.Navigation("Aircraft");

                    b.Navigation("Arrival");

                    b.Navigation("Departure");
                });

            modelBuilder.Entity("AviaTick.Ticket", b =>
                {
                    b.HasOne("AviaTick.Flight", "Flight")
                        .WithMany("Tickets")
                        .HasForeignKey("FlightId")
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_Flights1");

                    b.HasOne("AviaTick.Passenger", "Passenger")
                        .WithMany("Tickets")
                        .HasForeignKey("PassengerId")
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_Passenger");

                    b.Navigation("Flight");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("AviaTick.Aircraft", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("AviaTick.Airport", b =>
                {
                    b.Navigation("FlightArrivals");

                    b.Navigation("FlightDepartures");
                });

            modelBuilder.Entity("AviaTick.City", b =>
                {
                    b.Navigation("Airports");
                });

            modelBuilder.Entity("AviaTick.Flight", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("AviaTick.Passenger", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
